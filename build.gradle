buildscript {
    apply from: 'versions.gradle'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.10'
}

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

group 'com.github.blueboxware'
version pluginVersion

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/jetbrains/spek' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    compile 'commons-io:commons-io:2.6'

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
    testCompile 'org.jetbrains.spek:spek-api:1.1.5'
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
    // Needed for the Spek plugin to work correctly
    testCompile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4"
}

gradlePlugin {
    plugins {
        gdxPlugin {
            id = 'com.github.blueboxware.gdx'
            implementationClass = 'com.github.blueboxware.gdxplugin.GdxPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/BlueBoxWare/LibGDXGradlePlugin'
    vcsUrl = 'https://github.com/BlueBoxWare/LibGDXGradlePlugin.git'
    description = 'Plugin for creating Texture Packs and Distance Fields for use with LibGDX'
    tags = ['LibGDX']

    plugins {
        LibGDXGradlePlugin {
            id = 'com.github.blueboxware.gdx'
            displayName = 'LibGDX Gradle plugin'
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}
compileTestKotlin {
    kotlinOptions.jvmTarget = jvmTarget
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

task createReadmes {

    inputs.file("README.md.src")
    inputs.file("versions.gradle")

    outputs.file("README.md")

    String baseText = file("README.md.src")
        .text
        .replaceAll(~'(?s)<exclude>.*?</exclude>\\s*', '')
        .replaceAll(~'(?s)</?test[^>]*>\\s*', '')
        .replaceAll(~'<releasedVersion>', releasedPluginVersion)
        .replaceAll(~'<pluginVersion>', pluginVersion)

    doLast {
        file("README-${pluginVersion}.md").write(
                baseText
                .replaceAll(~'(?s)<kotlin>.*?</kotlin>', '')
                .replaceAll(~'(?s)```kotlin.*?```\\n?', '')
                .replaceAll(~'(?s)</?groovy>', '')
        )
        file("README-${pluginVersion}-kotlin.md").write(
                baseText
                .replaceAll(~'(?s)<groovy>.*?</groovy>', '')
                .replaceAll(~'(?s)```groovy.*?```\\n?', '')
                .replaceAll(~'(?s)</?kotlin>', '')
        )
    }

}

